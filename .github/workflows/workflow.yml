name: Deploy
on:
  workflow_call:
    secrets:
      AWS_ACCESS_KEY_ID:
        description: "AWS_ACCESS_KEY_ID of the caller workflow"
        required: true
      AWS_SECRET_ACCESS_KEY:
        description: "AWS_SECRET_ACCESS_KEY of the caller workflow"
        required: true
      AWS_S3_REGION:
        description: "AWS_S3_REGION of the caller workflow"
        required: true
      ACM_CERTIFICATE_ARN:
        description: "ACM_CERTIFICATE_ARN of the caller workflow"
        required: true
      CLOUDFLARE_TOKEN: 
        description: "CLOUDFLARE_TOKEN of the caller workflow"
        required: true
      CLOUDFLARE_ZONE:
        description: "CLOUDFLARE_ZONE of the caller workflow"
        required: true

env:
  DOMAIN: "menos.xyz"
  CONFIG: "./.menos/config.json"

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_S3_REGION }}
      - name: Set s3 bucket name
        run: |
          sudo apt-get -y install jq
          # Check if actions are enabled
          enabled="false"
          if ($(jq 'has("enabled")' config.json)); then 
              if $(jq .enabled config.json -r); then
                  enabled="true"
              fi
          fi
          if [ "$enabled" = "false" ]; then
              echo "Actions Not enabled from config file; exiting"
              exit 1;
          fi
          # Check if customDomain exists
          if ($(jq 'has("customDomain")' ${{ env.CONFIG }})); then 
            domain=$(jq .customDomain ${{ env.CONFIG }} -r)
            echo "custom_domain=$domain" >> $GITHUB_ENV
          else
            domain=${{ env.DOMAIN }}
          fi

          # Set subDomain
          if ($(jq 'has("subDomain")' ${{ env.CONFIG }})); then 
            subDomain=$(jq .subDomain ${{ env.CONFIG }} -r)
          else
            subDomain=$(jq .name ${{ env.CONFIG }} -r)
          fi
          
          # Check if subDomain is empty
          if [ -z $subDomain ]; then
            echo "bucket_name=$domain" >> $GITHUB_ENV
          else
            echo "bucket_name=$subDomain.$domain" >> $GITHUB_ENV
          fi
      - name: Check if the bucket exists
        run: |
          set +e
          aws s3api head-bucket --bucket ${{ env.bucket_name }} > /dev/null 2>&1
          echo "bucket_exists=$(echo $?)" >> $GITHUB_ENV
      - name: Create bucket in S3
        if: ${{ env.bucket_exists != 0 }}
        uses: aitorres/aws-s3-create-bucket@v1.2.0
        with:
          bucket-name: ${{ env.bucket_name }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_S3_REGION }}
          acl: "public-read"
      - name: Configure static website
        if: ${{ env.bucket_exists != 0 }}
        run: |
          aws s3 website s3://${{ env.bucket_name }}/ --index-document index.html
          wget https://raw.githubusercontent.com/ProntoSoft/.github/main/.github/workflows/s3.policy.json
          sed -i "s/BUCKET_NAME/${{ env.bucket_name }}/" s3.policy.json
          aws s3api put-bucket-policy --bucket ${{ env.bucket_name }} --policy file://s3.policy.json
      - name: Check if CloudFront Distribution exists
        run: |
          set +e
          aws cloudfront list-distributions | grep '"DomainName": "'${{ env.S3_DOMAIN }}'"' > /dev/null 2>&1
          echo "cloudfront_exists=$(echo $?)" >> $GITHUB_ENV
      - name: Create CloudFront Distribution
        if: ${{ env.cloudfront_exists != 0 }}
        env:
          S3_DOMAIN: ${{ env.bucket_name }}.s3-website-${{ secrets.AWS_S3_REGION }}.amazonaws.com
          ALIAS: ${{ env.bucket_name }}
        run: |
          set +e
          sudo apt-get -y install jq
          wget https://raw.githubusercontent.com/ProntoSoft/.github/main/.github/workflows/cloudfront.config.json
          sed -i "s/CALLER_REFERENCE/$(date +%s)/g" cloudfront.config.json
          sed -i "s/ALIAS/${{ env.ALIAS }}/g" cloudfront.config.json 
          sed -i "s/S3_DOMAIN/${{ env.S3_DOMAIN }}/g" cloudfront.config.json 
          sed -i "s/ACM_CERTIFICATE_ARN/${{ secrets.ACM_CERTIFICATE_ARN }}/g" cloudfront.config.json             
          cloudfront_domain=$(aws cloudfront create-distribution --distribution-config file://cloudfront.config.json | jq .Distribution.DomainName -r)
          echo "cloudfront_domain=$cloudfront_domain" >> $GITHUB_ENV
      - uses: rez0n/create-dns-record@v2.1
        if: env.cloudfront_exists != 0 && env.custom_domain == ''
        with:
          type: "CNAME"
          name: "${{ env.bucket_name }}"
          content: "${{ env.cloudfront_domain }}"
          ttl: 1
          proxied: true
          token: ${{ secrets.CLOUDFLARE_TOKEN }}
          zone: ${{ secrets.CLOUDFLARE_ZONE }}
      - name: Use Node.js 14
        uses: actions/setup-node@v1
        with:
          node-version: 14.x
      - name: Build
        run: |
          yarn install && yarn build
      - name: Deploy
        uses: jonelantha/gatsby-s3-action@v1
        with:
          dest-s3-bucket: ${{ env.bucket_name }}